1) Write a JAVA code with the class named ‘acad’ and a method ‘main’. Hard code the program
with two integers and print the sum of those two.

public class acad {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
    int a=1, b=2;
    int sum=0;
    sum = a+b;
    System.out.print("Sum of "+a+" and "+b+" is "+sum);
	}

}

Output:
Sum of 1 and 2 is 3

2) Rewrite the above code, where, inputs are provided by the user at runtime and the output is
printed.

import java.util.Scanner;

public class acad {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
    Scanner sc = new Scanner(System.in);
    System.out.println("Enter the value of a");
	int a= sc.nextInt();
	System.out.println("Enter the value of b");
	int b= sc.nextInt();
    int sum=0;
    sum = a+b;
    System.out.print("Sum of "+a+" and "+b+" is "+sum);
	}

}

Output:
Enter the value of a
4
Enter the value of b
5
Sum of 4 and 5 is 9


3) Write a program with a method name sum() that accepts two parameters from the user and
print the sum two numbers. Output of the format should be as:
First number is:
Second number is:
Sum is: 

import java.util.Scanner;

public class acad {
	public void sum(int a1, int b1){
		 int sum=0;
		 sum = a1+b1;
		 System.out.println("Sum is:"+sum);

	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
    Scanner sc = new Scanner(System.in);
    System.out.print("First number is:");
  	int a1= sc.nextInt();
  	System.out.print("Second number is:");
	int b1= sc.nextInt();
    acad a = new acad();
	a.sum(a1,b1);
	}

}


Output:

First number is:3
Second number is:4
Sum is:7

4) Write a program to accepts two numbers from stdin and find all the odd as well as even
numbers present in between them.

import java.util.Scanner;

public class acad {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
    Scanner sc = new Scanner(System.in);
    System.out.print("From number:");
  	int a= sc.nextInt();
  	System.out.print("To number:");
	int b= sc.nextInt();
	acad a1 = new acad();
	System.out.println("Even Numbers");
    for(int i=a;i<=b;i++){
    	
    	if(i%2==0){
        System.out.println(i);  		
    	}
    }
    System.out.println("Odd Numbers");
    for(int j=a;j<=b;j++){
    	if(j%2!=0){
    		System.out.println(j);
    	}
    }
	}

}

Output:
From number:2
To number:10
Even Numbers
2
4
6
8
10
Odd Numbers
3
5
7
9

5) Joe is scared to go to school. When her dad asked the reason, Joe said she is unable to complete
the task given by her teacher. The task was to find the “first 10 multiples” of the number entered
from stdin.
Example:
Input: 3
O/p:
3 x 1 = 3
3 x 2 = 6
………
………
…….
….
3 x 10 = 30
Help Joe in completing the task!

import java.util.Scanner;

public class acad {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
    Scanner sc = new Scanner(System.in);
    System.out.print("input:");
  	int input= sc.nextInt();
	for(int i=1;i<=10;i++){
		System.out.println(input+" x "+i+" = "+(input*i));
	}
	}
}

Output:

input:3
3 x 1 = 3
3 x 2 = 6
3 x 3 = 9
3 x 4 = 12
3 x 5 = 15
3 x 6 = 18
3 x 7 = 21
3 x 8 = 24
3 x 9 = 27
3 x 10 = 30

6) Write a program consisting method sum() and demonstrate the concept of method
overloading using this method.

public class acad {
	public void sum(int a1, int a2){
		 int sum=0;
		 sum = a1+a2;
			System.out.println("Sum of "+a1+" and "+a2+" is "+sum);

	}
	public void sum(int a1,int a2, int a3){
		int sum=0;
		sum=a1+a2+a3;
		System.out.println("Sum of "+a1+","+a2+" and "+a3+" is "+sum);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
    acad a = new acad();
	a.sum(10,11);
	a.sum(10, 11, 12);
	}

}

Output:

Sum of 10 and 11 is 21
Sum of 10,11 and 12 is 33

7) Can you overload a method with the same return type? Explain your answer with proper logic

Compiler doesnt consider the return type when differentiating methods, so you cant declare two methods with the same signature
even if they have different return type.

for example,

public class acad {
int show(int a,int b){
		int sum=0;
		sum=a+b;
		return sum;
}
int show(int a,int b, int c){
		int sum=0;
		sum=a+b+c;
		return sum;
}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
    acad a = new acad();
	a.show(10,34);
	a.show(1, 11,23);
	}

}

In the above program there are two methods with same return types. Compiler compiles fine without any output.

Suppose if we change the return type as void, everything works fine since the compiler doesnt consider the return type.

public class acad {
void show(int a,int b){
		int sum=0;
		sum=a+b;
		System.out.println(sum);
}
void show(int a,int b, int c){
		int sum=0;
		sum=a+b+c;
		System.out.println(sum);
}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
    acad a = new acad();
	a.show(10,34);
	a.show(1, 11,23);
	}

}

now we get the ouput as 
44
35





8) Write a program in java using Arrays that sorts the element in descending order.

import java.util.Scanner;

public class acad {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
    Scanner sc = new Scanner(System.in);
    int[] arr = new int[10];
    System.out.println("Enter size of array");
    int n=sc.nextInt();
    System.out.println("Enter the array elements");
    for(int i=0;i<n;i++){
    	arr[i]=sc.nextInt();
    }
    for(int i=0;i<10;i++){
    	for(int j=i+1;j<n;j++){
    		if(arr[i]<arr[j]){
    			int temp;
    			temp=arr[i];
    			arr[i]=arr[j];
    			arr[j]=temp;
    		}
    	}
    }
    		System.out.println("Descending order");
    		for(int i=0;i<n-1;i++){
    			System.out.println(arr[i]);
    		}
    		System.out.println(arr[n-1]);
    		
    	}
    }

Output:

Enter size of array
3
Enter the array elements
2
5
3
Descending order
5
3
2
